{"version":3,"sources":["components/InputOTP.jsx","components/home.jsx","components/success.jsx","App.js","serviceWorker.js","index.js"],"names":["codeBoxWrapper","width","display","flexDirection","JustifyContent","codeBox","borderWidth","borderRadius","padding","codeBoxInput","fontSize","fontWeight","textAlign","hiddenTextInput","position","height","opacity","InputOTP","setCodeReady","code","setCode","maxLength","codeInputRef","useRef","useState","isInputFocused","setIsInputFocused","codeArray","Array","fill","useEffect","length","isNaN","className","style","onFocus","current","focus","map","_value","index","digit","isCurrentDigit","isLastDigit","isFull","focusedClass","key","value","onChange","ref","onBlur","name","Home","history","codeReady","error","setError","errorMsg","setErrorMsg","Fragment","onSubmit","e","preventDefault","entry","codeLength","axios","post","then","res","data","status","replace","catch","console","log","target","concat","Success","App","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d990467c.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\n\nconst codeBoxWrapper = {\n    width : \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    JustifyContent: \"space-around\"\n}\n\nconst codeBox = { \n    // minWidth:\"20%\",\n    borderWidth:\"2px\",\n    borderRadius: \"5%\",\n    padding: \"1rem\"\n}\nconst codeBoxInput = { \n    width:\"60px\",\n    borderRadius:\"10%\",\n    fontSize: \"2rem\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n}\n\nconst hiddenTextInput = {\n    position: \"absolute\",\n    width: \"1px\",\n    height: \"1px\",\n    opacity: \"0\"\n}\n\n\nconst InputOTP = ({setCodeReady, code, setCode, maxLength }) => {\n\n    const codeInputRef = useRef(null);\n    const [isInputFocused,setIsInputFocused] = useState(false);\n\n    const codeArray = new Array(maxLength).fill(0);\n\n    const handleOnFocus = () =>{\n        setIsInputFocused(true);\n        codeInputRef.current.focus();\n    }\n\n    const handleOnBlur = () => {\n        setIsInputFocused(false);\n    };\n\n    useEffect(()=>{\n        // update code ready\n        setCodeReady(code.length == maxLength && !isNaN(code));\n        return () => setCodeReady(false);\n    },[code]);\n\n    const codeDigitInput = (_value, index) =>{\n        const inputChar = \" \";\n        const digit = code[index] || inputChar;\n        \n        const isCurrentDigit = index == code.length;\n        const isLastDigit = index == maxLength - 1;\n        const isFull = code.length == maxLength;\n\n        const isDigitFocused = isCurrentDigit || (isLastDigit && isFull)\n\n        let focusedClass = isInputFocused && isDigitFocused ? \"digitFocusedIsNumber\" : \"digitFocusedIsBlank\";\n\n        if(isNaN(code)) focusedClass = \"digitFocusedIsNotNumber\"; // All digit highlight as red\n        if(isFull && !isNaN(code)) focusedClass = \"digitFocusedIsNumber\"; //All digit highlight as green\n        \n        return (\n            //Individual digit block\n            <div key={index} style={codeBox}>\n                <input className={focusedClass} value={digit} style={codeBoxInput}/>\n            </div>\n        )\n    }\n    \n    return(\n        <div className=\"justify-content-center\">\n            <div style={codeBoxWrapper} onFocus={handleOnFocus}>\n                {codeArray.map(codeDigitInput)}\n            </div>\n            <input \n                style={hiddenTextInput}\n                value={code} \n                onChange={setCode} \n                maxLength={maxLength}\n                ref={codeInputRef}\n                onBlur = {handleOnBlur}\n                name=\"codeValue\"\n            />\n        </div>\n    );\n};\n\nexport default InputOTP;","import React, { useState} from \"react\"; \r\nimport axios from 'axios';\r\nimport InputOTP from './InputOTP';\r\n\r\nconst Home=({history, ...rest})=> {  \r\n  const [code, setCode] = useState(\"\");\r\n  const [codeReady, setCodeReady] = useState(false);\r\n  const [error, setError] =  useState(false);\r\n  const [errorMsg, setErrorMsg] =  useState(\"\");\r\n  const CODE_LENGTH = 6; \r\n  const apiEndPoint = \"/api/validation\"\r\n\r\n  const handleCodeChange = e =>{\r\n    setCode(e.target.value);\r\n  }    \r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n  \r\n    const entry = { code:code, codeLength: CODE_LENGTH }\r\n    axios.post(apiEndPoint,entry)\r\n    .then(res => {  \r\n      if(res.data.status === \"success\"){\r\n        setError(false); \r\n        history.replace(\"/success\")\r\n      }else{ \r\n        setError(true);\r\n        setErrorMsg(res.data.error['message']);\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })  \r\n  } \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"paper border mt\">  \r\n        <h1 className=\"mb-3\">Verification Code</h1>\r\n        <form className=\"form\" onSubmit={handleSubmit}>\r\n        <InputOTP \r\n          setCodeReady = {setCodeReady}\r\n          code = {code}\r\n          setCode = {handleCodeChange} \r\n          maxLength= {CODE_LENGTH}\r\n        />\r\n        <button className={\"submitBtn btn btn-\".concat(codeReady ? \"success-1\" : \"outline-dark disabled\")}>Submit</button>\r\n        </form>\r\n      </div>\r\n      {error && <div className=\"paper error text-danger\">\r\n        <h3>Verification Error</h3>\r\n        {errorMsg} \r\n      </div>}\r\n      \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Success = () =>{\r\n    return(\r\n        <div className=\"paper mt validation\">\r\n            <h1 className=\"display-4\">Validation Success</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Success;","import React from \"react\"; \nimport {Route, Switch} from 'react-router-dom'; \nimport Home from \"./components/home\";\nimport Success from \"./components/success\";\nimport \"./App.css\";\n\nconst App=()=> {\n  return (\n     <React.Fragment>\n       {/* <Home/> */}\n       <div className=\"content\">\n         <Switch>\n          <Route path=\"/success\" component={Success}/>\n          <Route path=\"/\" component={Home}/>\n         </Switch>\n       </div>\n     </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport './index.css'; \nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}